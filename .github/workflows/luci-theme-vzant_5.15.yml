name: luci-theme-vzant_5.15

on:
  repository_dispatch:  # 当通过 repository_dispatch 事件触发工作流程时执行
  workflow_dispatch:  # 当手动触发工作流程时执行
#    inputs:
#      tag:
#        description: 'Tag to release'
#        required: true
#        default: 'v0.0.1'  #手动点击Run workflow触发编译前，可以手动修改release显示的默认版本号
#  schedule:
#    - cron: '0 18 * * 5'  # 定时触发
  watch:
    types: started  # 右上角star按钮触发

jobs:
   openwrt:
      name: ${{ matrix.target.arch }}-${{ matrix.target.package }}_${{ matrix.target.kernel }}
      runs-on: ubuntu-latest
      environment: OpenWrt
      strategy:
        matrix:
          target:
            - arch: "aarch64_generic"  # 目标架构
              target: "rockchip"  # target目录
              sdk: "https://downloads.openwrt.org/snapshots/targets/rockchip/armv8/openwrt-sdk-rockchip-armv8_gcc-12.3.0_musl.Linux-x86_64.tar.xz"  # OpenWrt SDK的下载链接
              kernel: "5.15"  # kernel内核版本
              package: "luci-theme-vzant"  # 第三方ipk软件包名称
              name: "vzant"  # 第三方ipk软件包简称，通配符匹配用
              # url: "https://github.com/ykxVK8yL5L/luci-theme-vzant.git"  # 配置feeds.conf.default拉取第三方ipk软件包链接，仅支持一级目录
              # branches: "main" # 分支

      steps:
        - name: 检查
          uses: actions/checkout@main

        - name: 安装编译环境
          run: |
            sudo -E apt -yqq update  # 更新软件包列表
            sudo -E apt -yqq install libfuse-dev ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev python3-setuptools || true  # 安装所需的构建工具和依赖
            sudo -E apt -yqq autoremove --purge  # 检测移除不需要的软件包及配置文件
            sudo -E apt -yqq autoclean  # 清理软件包工具的缓存

        - name: 安装SDK
          run: |
            wget -O openwrt-sdk.tar.xz ${{ matrix.target.sdk }}  # 下载OpenWrt SDK
            xz -q -d openwrt-sdk.tar.xz && tar -xvf openwrt-sdk.tar  # 解压OpenWrt SDK
            mv -f openwrt-sdk-* openwrt-sdk && rm -rf *.tar  # 重命名SDK目录为 openwrt-sdk并删除解压tar文件

        - name: 配置更新
          run: |
            cd openwrt-sdk  # 进入OpenWrt SDK目录
            sed -i "s/KERNEL_PATCHVER:=*.*/KERNEL_PATCHVER:=${{ matrix.target.kernel }}/g" target/linux/${{ matrix.target.target }}/Makefile  # 切换kernel内核
            sed -i "s/KERNEL_TESTING_PATCHVER:=*.*/KERNEL_TESTING_PATCHVER:=${{ matrix.target.kernel }}/g" target/linux/${{ matrix.target.target }}/Makefile  # 切换kernel测试内核
            # echo "src-link ${{ matrix.target.name }} $GITHUB_WORKSPACE/" >> ./feeds.conf.default  # 如果ipk插件安装包在本项目主目录里，那么直接读取主目录关于ipk通配项的链接到feeds.conf.default
            # echo "src-git-full ${{ matrix.target.name }} ${{ matrix.target.url }} ${{ matrix.target.branches }}" >> ./feeds.conf.default  # 配置feeds.conf.default拉取第三方ipk软件包，仅支持一级目录
            sed -i "s/src-git/src-git-full/g" feeds.conf.default  # 替换feeds.conf.default参数
            sed -i "s/src-git-full-full/src-git-full/g" feeds.conf.default  # 替换feeds.conf.default参数
            cat feeds.conf.default  # 读取feeds.conf.default内容
            ./scripts/feeds update -f -a  # 更新feeds软件包
            ./scripts/feeds install -f -a  # 安装feeds依赖的软件包

        - name: 添加插件
          run: |
            chmod +x part.sh  # 附加权限给part.sh
            cat ${{ matrix.target.package }}.config >> openwrt-sdk/.config  # 勾选配置项构建编译条件
            cd openwrt-sdk  # 进入OpenWrt SDK目录
            $GITHUB_WORKSPACE/part.sh  # 运行part.sh

        - name: 编译ipk插件
          run: |
            cd openwrt-sdk  # 进入OpenWrt SDK目录
            make defconfig  # 读取配置
            make package/feeds/${{ matrix.target.name }}/${{ matrix.target.package }}/compile -j$(($(nproc)+1)) || make package/${{ matrix.target.package }}/compile -j1 V=s  # 编译ipk软件包
            tree bin/packages/  # 显示生成的软件包目录结构

        - name: 整理文件
          run: |
            mkdir -p firmware  # 创建firmware文件夹
            mkdir -p ipk  # 创建名ipk文件夹
            find openwrt-sdk/bin/packages/${{ matrix.target.arch }}/${{ matrix.target.name }}/ -type f \( -name "*.ipk" \) -exec mv {} ./firmware/ \; 2>/dev/null || true  # 拷贝ipk文件到firmware文件夹
            cp -rf firmware/* ./ipk/  # 将firmware文件夹中的文件复制到ipk文件夹中
            tar -czvf ipk.tar.gz ./ipk/ ; mv ipk.tar.gz ${{ matrix.target.arch }}-${{ matrix.target.package }}_${{ matrix.target.kernel }}.tar.gz  # 压缩ipk文件夹成tar.gz压缩文件

        - name: 上传artifact固件目录
          uses: actions/upload-artifact@main  # 使用 actions/upload-artifact 操作来将构建的软件包存档
          with:
            name: ${{ matrix.target.arch }}-${{ matrix.target.package }}_${{ matrix.target.kernel }}
            path: ./firmware/**  # 存档的文件路径，使用通配符匹配指定
            if-no-files-found: error  # 如果没有找到文件则报错

        - name: 上传releases发布
          uses: svenstaro/upload-release-action@master  # 使用 svenstaro/upload-release-action 操作来上传软件包到GitHub Release
          with:
            repo_token: ${{ secrets.GITHUB_TOKEN }}  # 使用GitHub令牌进行身份验证，，后面TOKEN改成自己的令牌名称
            file_glob: true  # 匹配通配符以选择要上传的文件
            overwrite: true  # 如果已存在具有相同名称的文件，则覆盖它
            file: ./${{ matrix.target.arch }}-${{ matrix.target.package }}_${{ matrix.target.kernel }}.tar.gz  # 要上传的文件，使用通配符匹配指定
            # tag: "refs/tags/${{ matrix.target.arch }}-${{ matrix.target.package }}_${{ matrix.target.kernel }}_${{ github.event.inputs.tag }}"  # 上传到GitHub Release的标签名称，包含一个变量，带release显示的版本号
            tag: "refs/tags/${{ matrix.target.arch }}-${{ matrix.target.package }}_${{ matrix.target.kernel }}"  # 上传到GitHub Release的标签名称，包含一个变量

        - name: 删除workflow工作流
          uses: Mattraks/delete-workflow-runs@main  # 使用Mattraks/delete-workflow-runs按规则删除workflow工作流
          with:
            token: ${{ secrets.GITHUB_TOKEN }}  # 使用GitHub令牌进行身份验证，，后面TOKEN改成自己的令牌名称
            repository: ${{ github.repository }}  # 存储库的默认名称
            retain_days: 1  # 每个workflow工作流最低的保留天数
            keep_minimum_runs: 1  # 每个workflow工作流最低的保留显示次数
