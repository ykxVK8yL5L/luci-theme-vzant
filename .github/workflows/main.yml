name: compile-package

on:
  repository_dispatch:  # 当通过 repository_dispatch 事件触发工作流程时执行
  workflow_dispatch:  # 当手动触发工作流程时执行
#    inputs:
#      tag:
#        description: 'Tag to release'
#        required: true
#        default: 'v0.0.1'  #手动点击Run workflow触发编译前，可以手动修改release显示的默认版本号
#  schedule:
#    - cron: '0 18 * * 5'  # 定时触发
#  watch:
#    types: started  # 右上角star按钮触发

jobs:
   openwrt:
      name: ipk-openwrt-${{ matrix.target.arch }}-${{ matrix.target.package }}
      runs-on: ubuntu-latest
      environment: OpenWrt
      strategy:
        matrix:
          target:
            - arch: "aarch64_generic"  # 目标架构
              sdk: "https://downloads.openwrt.org/releases/22.03.2/targets/rockchip/armv8/openwrt-sdk-22.03.2-rockchip-armv8_gcc-11.2.0_musl.Linux-x86_64.tar.xz"  # OpenWrt SDK的下载链接
              feeds: "https://raw.githubusercontent.com/openwrt/openwrt/openwrt-22.03/feeds.conf.default"  # 第三方feeds.conf.default的下载链接，注意分支要选对
              name: "vzant"  # 第三方ipk软件包简称，通配符匹配用
              url: "https://github.com/ykxVK8yL5L/luci-theme-vzant.git"  # 配置feeds.conf.default拉取第三方ipk软件包链接，仅支持一级目录
              branches: "main" # 分支
              package: "luci-theme-vzant"  # 第三方ipk软件包名称

      steps:
        - name: 检查
          uses: actions/checkout@main

        - name: 安装编译环境
          run: |
            sudo apt-get update  # 更新软件包列表
            sudo apt-get install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev python3-setuptools || true  # 安装所需的构建工具和依赖

        - name: 安装SDK
          run: |
            wget -O openwrt-sdk.tar.xz ${{ matrix.target.sdk }}  # 下载OpenWrt SDK
            xz -q -d openwrt-sdk.tar.xz && tar -xvf openwrt-sdk.tar  # 解压OpenWrt SDK
            mv -f openwrt-sdk-* openwrt-sdk  # 重命名SDK目录为 openwrt-sdk

        - name: 配置更新
          run: |
            cd openwrt-sdk  # 进入OpenWrt SDK目录
            curl -fsSL ${{ matrix.target.feeds }} > feeds.conf.default  # 拉取第三方feeds.conf.default到feeds.conf.default
            # echo "src-link ${{ matrix.target.name }} $GITHUB_WORKSPACE/" >> ./feeds.conf.default  # 如果ipk插件安装包在本项目主目录里，那么直接读取主目录关于ipk通配项的链接到feeds.conf.default
            echo "src-git ${{ matrix.target.name }} ${{ matrix.target.url }} ${{ matrix.target.branches }}" >> ./feeds.conf.default  # 配置feeds.conf.default拉取第三方ipk软件包，仅支持一级目录
            cat feeds.conf.default  # 读取feeds.conf.default内容
            ./scripts/feeds update -a  # 更新feeds软件包
            echo 'CONFIG_PACKAGE_${{ matrix.target.package }}=y' > ./.config  # 勾选配置项构建编译条件
            ./scripts/feeds install -d y -f -a  # 安装feeds依赖的软件包

        - name: 编译ipk插件
          run: |
            cd openwrt-sdk  # 进入OpenWrt SDK目录
            make defconfig  # 读取配置
            make package/${{ matrix.target.package }}/compile V=s  # 编译ipk软件包
            tree bin/packages/  # 显示生成的软件包目录结构

        - name: 整理文件
          run: |
            mkdir -p firmware  # 创建firmware文件夹
            find openwrt-sdk/bin/packages/ -type f -name "*${{ matrix.target.name }}*" -exec cp {} ./firmware/ \;  # 拷贝ipk文件到firmware文件夹

        - name: 上传固件目录
          uses: actions/upload-artifact@main  # 使用 actions/upload-artifact 操作来将构建的软件包存档
          with:
            name: ipk-openwrt-${{ matrix.target.arch }}-${{ matrix.target.package }}
            path: ./firmware/*.*  # 存档的文件路径，使用通配符匹配指定
            if-no-files-found: error  # 如果没有找到文件则报错

        - name: 上传ipk发布
          uses: svenstaro/upload-release-action@master  # 使用 svenstaro/upload-release-action 操作来上传软件包到GitHub Release
          with:
            repo_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # 使用GitHub令牌进行身份验证，，后面PERSONAL_ACCESS_TOKEN改成自己的令牌名称
            file_glob: true  # 匹配通配符以选择要上传的文件
            overwrite: true  # 如果已存在具有相同名称的文件，则覆盖它
            file: ./firmware/*.*  # 要上传的文件，使用通配符匹配指定
            # tag: "refs/tags/${{ matrix.target.package }}-${{ github.event.inputs.tag }}"  # 上传到GitHub Release的标签名称，包含一个变量，带release显示的版本号
            tag: "refs/tags/${{ matrix.target.package }}"  # 上传到GitHub Release的标签名称，包含一个变量
